<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.mapper.MemberMapper">
	<!-- namespace를 사용해서 mapper 파일을 찾아오는 주소 설정 -->

	<!-- 시간정보 조회 -->
	<!-- <select id="getTime" resultType="string"> select now() </select> -->

	<!-- 회원가입 -->
	<!-- userid 컬럼명. -->
	<insert id="insertMember">
		insert into member
		(member_id,member_pw,member_name,member_email,member_tel,employee_rank,create_date,update_date,permission_id,
		member_state,approval_status )
		values(#{member_id},#{member_pw},#{member_name},#{member_email},#{member_tel},'01',
		now(),now(),'01','01','00');
	</insert>

	<!-- 로그인 체크 -->
	<!-- <select id="loginMember" resultType="com.itwillbs.domain.MemberVO"> 
		select * from tbl_member where userid=#{userid} and userpw=#{userpw} </select> -->

	<!-- 로그인 체크 -->
	<select id="loginMember" resultType="MemberVO">
		select * from member
		where
		member_id=#{member_id}
	</select>

	<!-- 회원정보 조회 -->
	<select id="getMemberId" resultType="MemberVO">
		select * from member
		where
		member_id=#{member_id}
	</select>

	<!-- 회원정보 조회 -->
	<select id="getMemberEmail" resultType="MemberVO">
		select * from member
		where member_email=#{member_email}
	</select>

	<!-- 회원정보 조회 -->
	<select id="getMemberTel" resultType="MemberVO">
		select * from member
		where
		member_tel=#{tel}
	</select>

	<!-- 회원정보 수정 -->
	<update id="updateMember">
		update member
		set update_date = now(),
		department_id = #{department_id},
		member_state = #{member_state},
		employee_rank = #{employee_rank}
		where member_id = #{member_id}
	</update>

	<!-- 회원정보 삭제 -->
	<update id="deleteMember">update member set member_state = #{member_state}
		where member_id=#{member_id} </update>

	<!-- admin 회원정보 전체 목록(list) -->
	<select id="getMemberList" resultType="MemberVO">
		SELECT
		m.member_id,
		m.member_pw,
		m.member_name,
		m.member_email,
		m.member_tel,
		m.member_birth,
		m.department_id,
		m.employee_rank,
		m.create_date,
		m.update_date,
		m.permission_id,
		m.member_state,
		m.approval_status,
		c3.common_status AS employee_rank_value
		FROM
		member m
		LEFT JOIN
		common c3 ON m.employee_rank = c3.common_value AND c3.common_work =
		'emp_rank'
		WHERE
		m.member_state != (
		SELECT common_value
		FROM common
		WHERE common_status = '퇴사' AND common_work = 'member_state'
		) and m.approval_status != "01";
	</select>

	<!-- 회원가입 대기자 목록 -->
	<select id="getWaitingMember" resultType="MemberVO">
		SELECT
		*
		FROM
		member
		where
		approval_status = "01"
	</select>

	<!-- 특정 회원정보 -->
	<select id="getMemberById" resultType="MemberVO">
		SELECT
		*
		FROM
		member
		WHERE member_id = #{member_id}
	</select>

	<select id="getEmp_rank" resultType="map">
		SELECT common_value,
		common_status FROM common WHERE common_work = "emp_rank" ORDER BY
		common_value ASC;
	</select>
	<select id="getApproval" resultType="map">
		SELECT common_value,
		common_status FROM common WHERE common_work = 'approval_status' ORDER
		BY common_value ASC;
	</select>

	<select id="getDepartment" resultType="map">
		SELECT department_id, department_name
		FROM departments
		ORDER BY department_id ASC;
	</select>

	<select id="getMemberState" resultType="map">
		SELECT common_value,
		common_status FROM common WHERE common_work = 'member_state' ORDER BY
		common_value ASC;
	</select>




</mapper>